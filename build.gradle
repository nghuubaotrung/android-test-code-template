apply plugin: 'java'
apply plugin: 'jacoco'

repositories {
  jcenter()
  mavenCentral()
}

dependencies {
  testCompile fileTree(dir: 'libs', includes: ['${jar-file-name}.jar'])

  testCompile 'org.mockito:mockito-all:1.9.5'
  testCompile 'com.google.dexmaker:dexmaker:1.1'
  testCompile 'org.powermock:powermock-api-mockito:1.5.4'
  testCompile 'org.powermock:powermock-module-junit4:1.5.4'
  testCompile 'org.powermock:powermock-core:1.5.4'
  testCompile 'org.powermock:powermock-module-junit4-rule:1.5.4'
  testCompile 'org.powermock:powermock-classloading-base:1.5.4'
  testCompile 'org.powermock:powermock-classloading-xstream:1.5.4'
  testCompile 'org.powermock:powermock-module-testng:1.5.4'

  testCompile fileTree(dir: '/Users/nguyen_huubaotrung/Tools/android-sdks/platforms/android-19/', includes: ['android.jar'])
  testCompile fileTree(dir: '/Users/nguyen_huubaotrung/Tools/android-sdks/extras/android/support/v7/appcompat/libs', includes: ['android-support-v4.jar'])
  testCompile "junit:junit:4.12"
  testCompile "org.robolectric:robolectric:2.4"
  testCompile 'org.skyscreamer:jsonassert:1.2.3'
  testCompile "org.hamcrest:hamcrest-core:1.3"
  testCompile "org.hamcrest:hamcrest-library:1.3"
}

task jacoco(type: JacocoReport) {
  reports {
    xml.enabled = false
    html.enabled = true
    xml {
      destination "${project.rootDir}/build/reports/jacoco/${project.name}/jacoco_report.xml"
    }
    html {
      destination "${project.rootDir}/build/reports/jacoco/${project.name}/jacoco_report.html"
    }
  }
  classDirectories = fileTree(
          dir: './libs',
          includes: ['${jar-file-name}.jar'])
  sourceDirectories = files('${source-code-directory}')
  executionData = files('build/jacoco/test.exec')
}

test.doLast {
  tasks.jacoco.execute()
}

tasks.withType(Test) {
  scanForTestClasses = false
  include "**/*Test.class" // whatever Ant pattern matches your test class files
}

sourceSets {
  test {
    java { srcDirs 'src' }
  }
}

final def GRADLE_TEST_LIBRARIES_ID = 'Gradle Test Libraries'
task intellijSync << {
  description = 'Add gradle dependecies to IntelliJ project library'

  final def librariesDir = new File(".idea${File.separator}libraries")
  librariesDir.mkdirs()

  final def userHomeGradle = project.gradle.gradleUserHomeDir
  println "Set the USER_HOME_GRADLE variable to '$userHomeGradle.path'"

  def makeJarList = { path ->
    path.split(File.pathSeparator).collect {
      it.replaceAll userHomeGradle.path, "\\\$USER_HOME\\\$/.gradle"
    }
  }
  final def compileJars = makeJarList(configurations.compile.asPath)
  final def testJars = makeJarList(configurations.testCompile.asPath) - compileJars

  def createLibrary = { fileName, libraryName, jars ->
    final def gradleLibXml = new File(librariesDir, fileName)
    gradleLibXml.write """
<component name="libraryTable">
  <library name="$libraryName"/>
</component>"""
    final def xmlRoot = new XmlParser().parse(gradleLibXml)
    final def classesNode = xmlRoot.library[0].appendNode('CLASSES')

    jars.each { jar ->
      classesNode.appendNode('root', [url: "jar://$jar!/"])
    }

    def writer = new StringWriter()
    new XmlNodePrinter(new PrintWriter(writer)).print(xmlRoot)
    gradleLibXml.write writer.toString()
    println "File '${gradleLibXml.path}' updated"
  }
  createLibrary 'Gradle_Libraries.xml', 'Gradle Libraries', compileJars
  createLibrary 'Gradle_Test_Libraries.xml', GRADLE_TEST_LIBRARIES_ID, testJars
}

task intellijModuleSync(dependsOn: intellijSync) << {
  final def moduleFile = new File('sdk-native-testcode.iml') // TODO rename to match your module's name
  def root = new XmlParser().parse(moduleFile)
  def newModuleRootManager = root.component.find {it.'@name' == 'NewModuleRootManager'}
  def orderEntry = newModuleRootManager.orderEntry.find {
    it.'@type' == 'library' && it.'@name' == GRADLE_TEST_LIBRARIES_ID
  }
  if (orderEntry) {
    newModuleRootManager.remove(orderEntry)
  }
  newModuleRootManager.appendNode('orderEntry', [type: 'library', scope: 'TEST', name: GRADLE_TEST_LIBRARIES_ID, level: 'project'])

  def writer = new StringWriter()
  new XmlNodePrinter(new PrintWriter(writer)).print(root)
  moduleFile.write writer.toString()
  println "File '${moduleFile.path}' updated"
}
